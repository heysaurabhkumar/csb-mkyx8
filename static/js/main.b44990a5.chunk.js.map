{"version":3,"sources":["App.js","actions/index.js","reducers/updateCounter.js","reducers/index.js","store.js","index.js"],"names":["App","counter","useSelector","state","updateCounter","dispatch","useDispatch","className","onClick","type","payload","action","reducer","combineReducers","store","createStore","rootElement","document","getElementById","ReactDOM","render"],"mappings":"4MAMe,SAASA,IACtB,MAAMC,EAAUC,aAAaC,GAAUA,EAAMC,gBACvCC,EAAWC,cAEjB,OACE,sBAAKC,UAAU,MAAf,UACE,6DACA,wDAEA,gCACE,wBAAQC,QAAS,IAAMH,ECRtB,CACLI,KAAM,YACNC,QDM+C,IAA3C,yBAAqE,IACpET,EAAS,IACV,wBAAQO,QAAS,IAAMH,ECjBtB,CACLI,KAAM,YACNC,QDe+C,IAA3C,4BAEF,uBACA,wBAAQF,QAAS,IAAMH,ECNpB,CACLI,KAAM,UDKJ,sB,WENSL,MAbO,WAAmC,IAAlCD,EAAiC,uDAFnC,EAEwBQ,EAAW,uCACtD,OAAQA,EAAOF,MACb,IAAK,YACH,OAAON,EAAQQ,EAAOD,QACxB,IAAK,YACH,OAAOP,EAAQQ,EAAOD,QACxB,IAAK,QACH,OATe,EAUjB,QACE,OAAOP,ICHES,MAJCC,YAAgB,CAC9BT,kBCCaU,MAFDC,YAAYH,GCK1B,MAAMI,EAAcC,SAASC,eAAe,QAM5CC,IAASC,OACP,cAAC,aAAD,UACE,cAAC,IAAD,CAAUN,MAAOA,EAAjB,SACE,cAACd,EAAD,QAGJgB,K","file":"static/js/main.b44990a5.chunk.js","sourcesContent":["import \"./styles.css\";\n\nimport { incCounter, decCounter, resetCounter } from \"./actions/index\";\n\nimport { useSelector, useDispatch } from \"react-redux\";\n\nexport default function App() {\n  const counter = useSelector((state) => state.updateCounter);\n  const dispatch = useDispatch();\n\n  return (\n    <div className=\"App\">\n      <h1>Increment/Decrement Counter</h1>\n      <h2>using react and redux!</h2>\n\n      <div>\n        <button onClick={() => dispatch(decCounter(5))}>- Decrement</button>{\" \"}\n        {counter}{\" \"}\n        <button onClick={() => dispatch(incCounter(5))}>+ Increment</button>\n      </div>\n      <br />\n      <button onClick={() => dispatch(resetCounter())}>Reset</button>\n    </div>\n  );\n}\n","export const incCounter = (num) => {\r\n  return {\r\n    type: \"INCREMENT\",\r\n    payload: num\r\n  };\r\n};\r\n\r\nexport const decCounter = (num) => {\r\n  return {\r\n    type: \"DECREMENT\",\r\n    payload: num\r\n  };\r\n};\r\n\r\nexport const resetCounter = () => {\r\n  return {\r\n    type: \"RESET\"\r\n  };\r\n};\r\n","const initialState = 0;\r\n\r\nconst updateCounter = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"INCREMENT\":\r\n      return state + action.payload;\r\n    case \"DECREMENT\":\r\n      return state - action.payload;\r\n    case \"RESET\":\r\n      return initialState;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default updateCounter;\r\n","import updateCounter from \"./updateCounter\";\r\n\r\nimport { combineReducers } from \"redux\";\r\n\r\nconst reducer = combineReducers({\r\n  updateCounter\r\n});\r\n\r\nexport default reducer;\r\n","import { createStore } from \"redux\";\r\n\r\nimport reducer from \"./reducers/index\";\r\n\r\nconst store = createStore(reducer);\r\n\r\nexport default store;\r\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nimport store from \"./store\";\n\nimport { Provider } from \"react-redux\";\n\nconst rootElement = document.getElementById(\"root\");\n\n// store.subscribe(() => {\n//   console.log(store.getState());\n// });\n\nReactDOM.render(\n  <StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}